
function onOpen() 
{
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('Calvin\'s Box of Buttons');
  menu.addItem('Create New Reservation Agreement', 'createNewGoogleDocs')
  menu.addToUi();
  menu.addItem('3 Month Calendar Update','sync')
  menu.addToUi();
  changelog();
  bookingLimit();
}

function changelog() {
  SpreadsheetApp.getUi().alert("FY 23-24 Tracker Log: \n\t 1. Updated the formulas to remove the Inquiry bug we saw.\n\t 2. Updated the rules in the Tracker. \n\t\t - If the Status date in Column C is more than 180 days away from the booked date in Column A, Column A will highlight to Red to signify \"Currently unable to book.\" \n\t\t - If the Status date in Column C is less than 180 days away from the booked date in Column A, Column A will highlight to Green to signify \"Currently able to book.\" \n\t 3. Currently working on updating and fixing the Tab below titled \"Tracker Instructions & Explanation", SpreadsheetApp.getUi().ButtonSet.OK);
  }

function bookingLimit() {
  var today = new Date();
  var generalEventLimit = new Date(today);
  var weddingEventLimit = new Date(today);
  
  // Set the limit for general events to today + 180 days
  generalEventLimit.setDate(today.getDate() + 180);
  
  // Set the limit for wedding events to today + 365 days
  weddingEventLimit.setDate(today.getDate() + 365);
  
  // Format the date limits as strings
  var generalEventLimitStr = Utilities.formatDate(generalEventLimit, Session.getScriptTimeZone(), 'MMMM dd, yyyy');
  var weddingEventLimitStr = Utilities.formatDate(weddingEventLimit, Session.getScriptTimeZone(), 'MMMM dd, yyyy');
  
  // Create the alert message
  var message = "We can book general events out until " + generalEventLimitStr + ".\n" +
                "We can book wedding events out until " + weddingEventLimitStr + ".";
  
  // Show the alert
  SpreadsheetApp.getUi().alert("Booking Limits", message, SpreadsheetApp.getUi().ButtonSet.OK);
}

function createNewGoogleDocs() 
{
  const googleDocTemplate = DriveApp.getFileById('1x6PHwng0tJ18FwZTkqWfiFR5uPIqiH1BFBZD8boHMC0');
  
  const destinationFolder = DriveApp.getFolderById('16iZZ3DpddfSoGfLqw2g9MzG9Z3tWbnL2')
  
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('FY 23-24')
  
  //Here, we limit the data we are retrieving from the document. You MUST have the complete rows[0] selected to retrieve all of the information for the document to generate properly.

  const rows = sheet.getActiveRange().getValues();
  //This is so that we are only looking at the single row we've selected.
  var active_range = sheet.getActiveRange();
  Logger.log(rows)

  //Here we format all of the dates and times that we use below.
  var date = Utilities.formatDate(new Date(), "GMT", "MM/dd/YYYY");
  const eventdate = Utilities.formatDate(new Date(rows[0][0]), "GMT", "MM/dd/YYYY");
  const btimefrom = Utilities.formatDate(new Date(rows[0][11]), "America/New_York", "h:mm a");
  const btimeto = Utilities.formatDate(new Date(rows[0][12]), "America/New_York", "h:mm a");
  const etimefrom = Utilities.formatDate(new Date(rows[0][13]), "America/New_York", "h:mm a");
  const etimeto = Utilities.formatDate(new Date(rows[0][14]), "America/New_York", "h:mm a");
  const depdate = Utilities.formatDate(new Date(rows[0][24]), "GMT", "MM/dd/YYYY")


      //Here we check to make sure the event has a status (Confirmed, Inquiry, Tentative) and that a document has NOT been generated for it.
    if (rows[0][3] == "EXPIRED" ||rows[0][3] == "CANCELLED" ) return;
    if (rows[0][37]) return;
    

    //Using the rows[0] data in a template literal below, we make a copy of our template document in our destination folder.
    // It should look similar to this example:
    // 09/24/2023 (Event Name) Reservation Agreement on 09/11/2023
    const copy = googleDocTemplate.makeCopy(` ${eventdate} ${rows[0][4]} Reservation Agreement on ${date}` , destinationFolder)
    Logger.log(copy);
    
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    
    //Some of the content lives in the HeaderSection, so we get that for editing:
    const header = doc.getHeader();
    //In these lines, we replace our replacement tokens with values from our spreadsheet rows[0]:


    //We then change to the body of the document. Most of the content lives in the body, so we get that for editing:
    const body = doc.getBody();
    //In these lines, we replace our replacement tokens with values from our spreadsheet rows[0]:

    body.replaceText('{{TDate}}', date);
    body.replaceText('{{Booked Time from:}}', btimefrom);
    body.replaceText('{{Booked Time to:}}', btimeto);
    body.replaceText('{{Day}}', rows[0][1]);
    body.replaceText('{{EDate}}', eventdate);


    body.replaceText('{{Event Name}}', rows[0][4]);
    body.replaceText('{{BR1}}', rows[0][5]);
    body.replaceText('{{BR2}}', rows[0][6]);
    body.replaceText('{{BR3}}', rows[0][7]);
    body.replaceText('{{TH}}', rows[0][8]);
    body.replaceText('{{ROT}}', rows[0][9]);
    body.replaceText('{{CON}}', rows[0][10]);
    body.replaceText('{{Event Time from:}}', etimefrom);
    body.replaceText('{{Event Time to:}}', etimeto);
    body.replaceText('{{Responsible}}', rows[0][16]);
    body.replaceText('{{Sponsor}}', rows[0][17]);
    body.replaceText('{{Email}}', rows[0][18]);
    body.replaceText('{{Phone}}', rows[0][19]);
    body.replaceText('{{Address}}', rows[0][20]);
    body.replaceText('{{EAttend}}', rows[0][21]);
    body.replaceText('{{Deposit}}', '$'+rows[0][22]);
    body.replaceText('{{Deposit Payment Method}}', rows[0][23]);
    body.replaceText('{{Deposit Date Received}}', depdate);
    body.replaceText('{{Rental Rate}}', rows[0][25]);
    body.replaceText('{{Rental Rate Notes}}', rows[0][26]);
    body.replaceText('{{Food}}', rows[0][27]);
    body.replaceText('{{Alcohol}}', rows[0][28]);
    if (rows[0][29] == null)
    {
      sheet.getRange(active_range.getRowIndex(), 28).setValue('N/A');
    }
    body.replaceText('{{AV}}', rows[0][29])
    body.replaceText('{{Security}}', rows[0][30]);
    body.replaceText('{{Security Rate}}', rows[0][31]);
    body.replaceText('{{Contract Cleaning}}', rows[0][32]);
    body.replaceText('{{Cleaning Rate}}', rows[0][33]);
    body.replaceText('{{TOTAL RATE}}', rows[0][34]);
    body.replaceText('{{Other Notes}}', rows[0][35]);
      if (rows[0][36] == null)
      {
        sheet.getRange(active_range.getRowIndex(), 36).setValue('0');
      }
    body.replaceText('{{Other Rate}}', rows[0][36]);

    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //Store the url of our new document in a variable
    const url = doc.getUrl();
    Logger.log(url);
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    // - Need to figure out how to write the URL to specific cell in 
    var active_range = sheet.getActiveRange();
    var value = sheet.getRange(active_range.getRowIndex(), 38).setValue(url);
}

var today = new Date();
var twoweeks = new Date();
var twoweeks = new Date(twoweeks.setDate(twoweeks.getDate() + 90));
var testtime = new Date();
var testtime = new Date(testtime.setDate(testtime.getDate() + 3))

// Function to replace school names
function replaceSchoolNames(originalString) {
  // Replace school names as needed
  originalString = originalString.replace("BOE/OCPS", "Oconee County Primary School: ");
  originalString = originalString.replace("BOE/OCES", "Oconee County Elementary School: ");
  originalString = originalString.replace("BOE/CFES", "Colham Ferry Elementary School: ");
  originalString = originalString.replace("BOE/DCES", "Dove Creek Elementary School: ");
  originalString = originalString.replace("BOE/HSES", "High Schoals Elementary School: ");
  originalString = originalString.replace("BOE/MBES", "Malcom Bridge Elementary School: ");
  originalString = originalString.replace("BOE/RBES", "Rocky Branch Elementary School: ");
  originalString = originalString.replace("BOE/DCMS", "Dove Creek Middle School: ");
  originalString = originalString.replace("BOE/MBMS", "Malcom Bridge Middle School: ");
  originalString = originalString.replace("BOE/OCMS", "Oconee County Middle School: ");
  originalString = originalString.replace("BOE/OCHS", "Oconee County High School: ");
  originalString = originalString.replace("BOE/NOHS", "North Oconee High School: ");
  originalString = originalString.replace("BOE/Transportation", "Oconee County Schools Transportation: ");
  originalString = originalString.replace("BOE/Ext. Services 4-H", "Oconee County Extension Office 4-H: ");
  originalString = originalString.replace("BOE/4H", "Oconee County Extension Office 4-H: ");
  originalString = originalString.replace("BOC/Library", "Oconee County Library: ");

  originalString = originalString.replace("BOE/", "Board of Education: ");  
  originalString = originalString.replace("BOC/", "Board of Commissioners: ");
  
  return originalString;
}

function sync() {
  var calendarId = 'f7250c4f73a682f0002d802d4ec064c3d6f071e47e9c9ee19ff4634e48288409@group.calendar.google.com'; // Please set your calendar ID.
  var sheet = SpreadsheetApp.getActive().getSheetByName('FY 23-24');
  const calendar = CalendarApp.getCalendarById(calendarId);

  var startRow = 2;  // First row from which data should process > 2 exempts my header row
  var numRows = sheet.getLastRow();   // Number of rows to process
  var numColumns = sheet.getLastColumn();
  var dataRange = sheet.getRange(startRow, 1, numRows - 1, numColumns);
  var data = dataRange.getDisplayValues();

  for (var i = 0; i < data.length; ++i) {
    var row = data[i];
    var eventdate = new Date(row[0]);  // The date of the Event
    var status = row[3];  // (Confirmed, Tentative, Inquiry, Cancelled)
    var depositdate = row[24]; // Date the deposit was received   
    var eventgeneratedcheck = row[41]; // Event created and EventID (iCalUID) populated

    // Your name replacement function here
    row[4] = replaceSchoolNames(row[4]);

    // I modified below script.
    if (eventdate < today) continue;
    if (eventdate > twoweeks) continue;
    if (depositdate == null) continue;

    var startTime = new Date(`${row[0]} ${row[11]} ${tZone}`);
    var endTime = new Date(`${row[0]} ${row[12]} ${tZone}`);

    if (status == "CONFIRMED" && eventgeneratedcheck == "") {
      if (row[11] && row[12]) {
        try {
          Logger.log(row[4]);
          var currentCell = sheet.getRange(startRow + i, numColumns);
          var tZone = 'EST';
          var startTime = new Date(`${row[0]} ${row[11]} ${tZone}`);
          var endTime = new Date(`${row[0]} ${row[12]} ${tZone}`);
          var eventTitle = row[4];
          var event = calendar.createEvent(eventTitle, startTime, endTime, { description: '\nEvent Start: ' + row[13] + '\nEvent End: ' + row[14] + '\nEstimated Attendance: ' + row[21] + '\nOther Notes: ' + row[35] + '\nAudio/Visual: ' + row[29] });
          var eventId = event.getId();
          currentCell.setValue(eventId);
        } catch (error) {
          var dayplusone = new Date(endTime.setDate(endTime.getDate() + 1));
          var eventTitle = row[4];
          var event = calendar.createEvent(eventTitle, startTime, dayplusone, { description: '\nEvent Start: ' + row[13] + '\nEvent End: ' + row[14] + '\nEstimated Attendance: ' + row[21] + '\nOther Notes: ' + row[35] + '\nAudio/Visual: ' + row[29] });
          var eventId = event.getId();
          currentCell.setValue(eventId);
        }
      } else {
        var currentCell = sheet.getRange(startRow + i, numColumns);
        var eventTitle = row[4];
        var event = calendar.createAllDayEvent(eventTitle, eventdate, { description: '\nEvent Start: ' + row[13] + '\nEvent End: ' + row[14] + '\nEstimated Attendance: ' + row[21] + '\nOther Notes: ' + row[35] + '\nAudio/Visual: ' + row[29] });
        var eventId = event.getId();
        currentCell.setValue(eventId);
      }
    } else if (status == "CANCELLED" && eventgeneratedcheck != "") {
      try {
        var currentCell = sheet.getRange(startRow + i, numColumns);
        var eventgeneratedcheck = eventgeneratedcheck.split("@")[0];
        calendar.getEventById(eventgeneratedcheck).deleteEvent();
        currentCell.clearContent();
      } catch {
        var currentCell = sheet.getRange(startRow + i, numColumns);
        currentCell.clearContent();
      }
    } else if (status == "MOVED" && eventgeneratedcheck != "") {
      try {
        var currentCell = sheet.getRange(startRow + i, numColumns);
        var eventgeneratedcheck = eventgeneratedcheck.split("@")[0];
        calendar.getEventById(eventgeneratedcheck).deleteEvent();
        currentCell.clearContent();
      } catch {
        var currentCell = sheet.getRange(startRow + i, numColumns);
        currentCell.clearContent();
      }
    }
  }
}
