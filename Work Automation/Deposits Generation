function onOpen() {
const ui = SpreadsheetApp.getUi();
const menu = ui.createMenu('Autofill Deposits');
menu.addItem('Create New Deposit','createnewdeposit')
menu.addToUi();
menu.addItem('Quarterly Transfer','transferData')
menu.addToUi();
  changelog();
}

function changelog() {
  SpreadsheetApp.getUi().alert("Deposits Tracker Changelog: \n\t 1. Added a button under 'Autofill Deposits' named 'Quarterly Transfer' to ease the burden of gathering data. \n\t\t - When pressed, a box will appear and ask for a 4 digit reference number to begin searching from. \n\t\t - A 2nd box will appear and ask for a highlight color so that you know where you started and ended for reference numbers.", SpreadsheetApp.getUi().ButtonSet.OK);
  }

function createnewdeposit() {
  const googleDocTemplate = DriveApp.getFileById('12ct_2v8zSJO1yYe6A5m1ib86fIUk4-m9V0iFzqw0snQ');
  const destinationFolder = DriveApp.getFolderById('1qoZiSsC1yPFQ4EaQrwZSQU-1JjirnkAR')
    const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Deposits')
      const rows = sheet.getDataRange().getValues();
      
      rows.forEach(function(row, index) {
        if (index === 0) return;
        if (row[9]) return;

        const titledate = Utilities.formatDate(new Date(row[3]), "GMT", "MM/dd/YYYY");
        const copy = googleDocTemplate.makeCopy(`Ref# ${row[0]} ${titledate} ${row[1]} Deposit Form`, destinationFolder)
        const doc = DocumentApp.openById(copy.getId())
        const body = doc.getBody();
        const depositdate = Utilities.formatDate(new Date(row[2]), "GMT", "MM-dd-YYYY");

        body.replaceText('{{REF. #}}', 'Ref #' && row[0]);
        body.replaceText('{{SOURCE}}', row[1]);
        body.replaceText('{{DEPOSIT DATE}}', depositdate);
        body.replaceText('{{EVENT DATE}}', titledate);
        body.replaceText('{{AMOUNT}}', '$' + row[4]);
        body.replaceText('{{PAYMENT BY}}', row[5]);
        body.replaceText('{{CREDIT ACCOUNT}}', row[6]);
        body.replaceText('{{DEPOSIT LOGGED BY}}', row[7]);
        body.replaceText('{{NOTES}}', row[8]);
      
        doc.saveAndClose();
        const url = doc.getUrl();
        sheet.getRange('J2').setValue(url)
        .clearNote();
        sheet.insertRowsBefore(2, 1);
        var refnumup = sheet.getRange('A3').getValue();
        sheet.getRange('A2').setValue(refnumup+1);
        sheet.getRange('J2').setNote('If this box is not empty, the script will not run or generate the deposit document.')
        })

}

function selectHighlightColor() {
  var ui = SpreadsheetApp.getUi();
  var response = ui.prompt(
    'Select Highlight Color',
    'Choose a highlight color by entering the corresponding number:\n' +
    '1. Yellow\n' +
    '2. Green\n' +
    '3. Red\n' +
    '4. Blue\n' +
    '5. None (No highlight)',
    ui.ButtonSet.OK_CANCEL
  );

  if (response.getSelectedButton() === ui.Button.OK) {
    var colorChoice = response.getResponseText();
    
    if (colorChoice === '1') {
      return '#fff2cc'; // Yellow
    } else if (colorChoice === '2') {
      return '#d9ead3'; // Green
    } else if (colorChoice === '3') {
      return '#f4cccc'; // Red
    } else if (colorChoice === '4') {
      return '#cfe2f3'; // Blue
    } else if (colorChoice === '5') {
      return ''; // No highlight
    } else {
      ui.alert('Invalid choice. Please select a valid number (1-5).');
      return selectHighlightColor(); // Prompt again if the choice is invalid
    }
  } else {
    return ''; // No highlight
  }
}

function transferData() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var depositsSheet = ss.getSheetByName('Deposits'); // Replace with your actual sheet names
  var transferSheet = ss.getSheetByName('Transfer');
  var ui = SpreadsheetApp.getUi();
  var colorChoice = selectHighlightColor();
  
  // Clear the contents of Column A and Column B on the "Transfer" sheet
  transferSheet.getRange('A:A').clearContent();
  transferSheet.getRange('B:B').clearContent();

  // Prompt for the first reference number to start the loop
  var response = ui.prompt('Enter the first reference number to check for:');
  var startRefNumber = response.getResponseText();

  if (response.getSelectedButton() === ui.Button.OK && startRefNumber) {
    var lastRow = depositsSheet.getLastRow();
    var dataRange = depositsSheet.getRange(1, 1, lastRow, 6).getValues(); // Assuming columns A-F are used

    for (var i = 0; i < dataRange.length; i++) {
      var row = dataRange[i];
      var refNumber = row[0];
      var textInColumnF = row[5];

      // Skip header row (Row 1) and blank row (Row 2)
      if (i < 2) {
        continue;
      }

      if (refNumber == startRefNumber) {
        // Set the highlight color for the last row
        depositsSheet.getRange(i + 1, 1, 1, 9).setBackground(colorChoice); // Change the color as needed
      }

      if (refNumber >= startRefNumber&& textInColumnF === 'Credit') {
        // Set the highlight color for the last row
        depositsSheet.getRange(i + 1, 1, 1, 9).setBackground(colorChoice); // Change the color as needed
      }

      if (refNumber >= startRefNumber && textInColumnF === 'Credit') {
        // Merge data into one cell in the specified format
        var mergedData = 'Transfer of Credit payment for ';
        var amount = '$' + row[4];
        
        if (amount <= '$300') {
          mergedData += 'partial event fees';
        } else if (amount > '$300') {
          mergedData += 'event fees';
        }
        
        mergedData += ' of event on ' + Utilities.formatDate(row[3], ''+ ss.getSpreadsheetTimeZone() +'', 'MM/dd/yyyy') +
          ' Ref. #' + refNumber + ' ' + row[1];
        
        // Transfer the $ amount to Column B of the "Transfer" sheet
        transferSheet.getRange(transferSheet.getLastRow() + 1, 2).setValue(amount);

        // Transfer the merged data to Column A of the "Transfer" sheet
        transferSheet.getRange(transferSheet.getLastRow(), 1).setValue(mergedData);
      }
    }
  } else {
    return; // Exit if the user cancels or doesn't enter a value
  }
}
